services:
  postgres_company:
    image: postgres:15
    container_name: postgres_company
    environment:
      POSTGRES_DB: ${COMPANY_M_DB}
      POSTGRES_USER: ${COMPANY_M_ADMIN}
      POSTGRES_PASSWORD: ${COMPANY_M_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - company_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${COMPANY_M_ADMIN} -d ${COMPANY_M_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_user:
    image: postgres:15
    container_name: postgres_user
    environment:
      POSTGRES_DB: ${USERS_M_DB}
      POSTGRES_USER: ${USERS_M_ADMIN}
      POSTGRES_PASSWORD: ${USERS_M_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERS_M_ADMIN} -d ${USERS_M_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.9.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z localhost 9092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 40s

  company-service:
    build: ./company
    container_name: company_service
    depends_on:
      postgres_company:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_company:5432/${COMPANY_M_DB}
      SPRING_DATASOURCE_USERNAME: ${COMPANY_M_ADMIN}
      SPRING_DATASOURCE_PASSWORD: ${COMPANY_M_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8082:8082"
    restart: on-failure

  user-service:
    build: ./user
    container_name: user_service
    depends_on:
      postgres_user:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_user:5432/${USERS_M_DB}
      SPRING_DATASOURCE_USERNAME: ${USERS_M_ADMIN}
      SPRING_DATASOURCE_PASSWORD: ${USERS_M_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8081:8081"
    restart: on-failure

  gateway-service:
    build: ./gateway
    container_name: gateway_service
    depends_on:
      company-service:
        condition: service_started
      user-service:
        condition: service_started
    environment:
      USER_SERVICE_URL: http://user-service:8081
      COMPANY_SERVICE_URL: http://company-service:8082
    ports:
      - "8080:8080"
    restart: on-failure

volumes:
  company_data:
  user_data: